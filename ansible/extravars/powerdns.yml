---
POWERDNS_SERVICE_NAME: "fw-powerdns"
POWERDNS_SERVICE_SYSTEMD_DESCRIPTION: "Firewall DNS Services - PowerDNS Server and Recursor"
POWERDNS_SERVICE_SYSTEMD_REQUIRES: "network-online.target docker.service fw-data.service"
POWERDNS_SERVICE_SYSTEMD_AFTER: "network-online.target time-sync.target docker.service fw-data.service"
POWERDNS_SERVICE_SYSTEMD_FILE: "/etc/systemd/system/{{ POWERDNS_SERVICE_NAME }}.service"
POWERDNS_SERVICE_IMAGES:
  powerdns:
    name: "nixknight/powerdns"
    tag: "4.x"
POWERDNS_SERVICE_COMPOSE_PATH: "/etc/firewall-gw/docker-compose/powerdns"
POWERDNS_COMPOSE_SERVICE_CONFIG_PATH: "/etc/firewall-gw/config/powerdns"
POWERDNS_IMAGE: "{{ POWERDNS_SERVICE_IMAGES.powerdns.name }}:{{ POWERDNS_SERVICE_IMAGES.powerdns.tag }}"
POWERDNS_COMPOSE_SERVICE_CONFIG_FILES:
  - src: "{{ playbook_dir }}/templates/pdns/recursor.conf.j2"
    dest: "{{ POWERDNS_COMPOSE_SERVICE_CONFIG_PATH }}/recursor.conf"
    mode: 644
    owner: "root"
    group: "root"
  - src: "{{ playbook_dir }}/templates/pdns/server.conf.j2"
    dest: "{{ POWERDNS_COMPOSE_SERVICE_CONFIG_PATH }}/server.conf"
    mode: 644
    owner: "root"
    group: "root"

PDNS_SERVER_DB_BACKEND: "gpgsql"
PDNS_SERVER_DB_HOST: 127.0.0.1
PDNS_SERVER_DB_USERNAME: "powerdns"
PDNS_SERVER_DB_DATABASE: "powerdns"
PDNS_SERVER_ADDRESS: "{{ PDNS_SERVER_DB_HOST }}"
PDNS_SERVER_LOCAL_PORT: 5300
PDNS_SERVER_API_ADDRESS: "{{ PDNS_SERVER_DB_HOST }}"
PDNS_SERVER_API_PORT: 8081
PDNS_SERVER_API_ALLOW_FROM: "{{ PDNS_SERVER_DB_HOST }}/32"

PDNS_RECURSOR_THREADS: 4
PDNS_RECURSOR_LOCAL_ZONE: "{{ ACME_DOMAIN_NAME }}"
PDNS_RECURSOR_LOCAL_DNS_ADDRESS: "{{ PDNS_SERVER_DB_HOST }}"
PDNS_RECURSOR_LOCAL_DNS_PORT: 5300
PDNS_RECURSOR_LISTEN_ADDRESS: 0.0.0.0:5301
PDNS_RECURSOR_UPSTREAM_RESOLVERS: "8.8.8.8;8.8.4.4"
PDNS_RECURSOR_WEB_SERVER_LOCAL_ADDRESS: "{{ PDNS_SERVER_DB_HOST }}"
PDNS_RECURSOR_WEB_SERVER_LOCAL_PORT: 8082
PDNS_RECURSOR_WEB_SERVER_ALLOW_FROM: "{{ PDNS_SERVER_API_ALLOW_FROM }}"

POWERDNS_SERVICE_MANIFEST:
  dest: "{{ POWERDNS_SERVICE_COMPOSE_PATH }}/docker-compose.yml"
  content:
    services:
      powerdns-server:
        image: "{{ POWERDNS_IMAGE }}"
        command: [ "/usr/local/bin/pdns.sh", "--pdns" ]
        environment:
          PDNS_DB_BACKEND: "{{ PDNS_SERVER_DB_BACKEND }}"
          PDNS_DB_HOST: "{{ PDNS_SERVER_DB_HOST }}"
          PDNS_DB_USERNAME: "{{ PDNS_SERVER_DB_USERNAME }}"
          PDNS_DB_PASSWORD: "{{ PDNS_SERVER_DB_PASSWORD }}"
          PDNS_DB_DATABASE: "{{ PDNS_SERVER_DB_DATABASE }}"
        network_mode: host
        volumes:
          - "{{ POWERDNS_COMPOSE_SERVICE_CONFIG_PATH }}/server.conf:/etc/powerdns/pdns.conf"
        healthcheck:
          test: ["CMD-SHELL", "dig @127.0.0.1 -p 5300 ns1.{{ ACME_DOMAIN_NAME }} SOA +short"]
          interval: 10s
          timeout: 5s
          retries: 5
          start_period: 30s
      powerdns-recursor:
        image: "{{ POWERDNS_IMAGE }}"
        command: [ "/usr/local/bin/pdns.sh", "--recursor" ]
        network_mode: host
        volumes:
          - "{{ POWERDNS_COMPOSE_SERVICE_CONFIG_PATH }}/recursor.conf:/etc/powerdns/recursor.conf"
        healthcheck:
          test: ["CMD-SHELL", "dig @127.0.0.1 -p 5301 google.com +short"]
          interval: 15s
          timeout: 5s
          retries: 5
          start_period: 30s
        depends_on:
          powerdns-server:
            condition: service_healthy

PDNS_SERVER_URL: "https://pdns.{{ ACME_DOMAIN_NAME }}"
PDNS_TOFU_MODULE_CONFIG_FILE_DEST: "/tmp/pdns_config.yaml"

PDNS_TOFU_PROJECT_PATH: "../terraform/modules/powerdns"
PDNS_TOFU_STATE_DB_SCHEMA_NAME: "pdns"
PDNS_TOFU_DNS_DEFAULT_TTL: 60
PDNS_TOFU_ENV:
  PDNS_API_KEY: "{{ PDNS_SERVER_API_KEY }}"
  PDNS_SERVER_URL: "{{ PDNS_SERVER_URL }}"
  TF_VAR_dns_config_file: "{{ PDNS_TOFU_MODULE_CONFIG_FILE_DEST }}"

# DNS Zone config example
# PDNS_TOFU_MODULE_CONFIG:
#   dns_zones:
#   - name: "{{ ACME_DOMAIN_NAME }}"
#     kind: "Native"
#     nameservers:
#       - "ns1.{{ ACME_DOMAIN_NAME }}"
#     records:
#       - name: "ns1"
#         type: "A"
#         content: "{{ KEA_SUBNET | ansible.netcommon.ipmath(1) }}"
#         ttl: "{{ PDNS_TOFU_DNS_DEFAULT_TTL }}"

# DNS Zone config example when including Kea host reservations for both IPv4 and IPv6.
# The jinja2 logic was taken from ChatGPT.
# PDNS_COMBINED_RECORDS: |
#   {% set unique_records = {} -%}
#   {% for record in PDNS_STATIC_RECORDS -%}
#     {% set key = record.name + record.type + record.content -%}
#     {% if key not in unique_records -%}
#       {% set _ = unique_records.update({key: record}) -%}
#     {% endif -%}
#   {% endfor -%}
#   {% for reservation in KEA_DHCP4_HOST_RESERVATIONS -%}
#     {% set key = reservation.hostname + 'A' + reservation['ip-address'] -%}
#     {% if key not in unique_records -%}
#       {% set _ = unique_records.update({key: {'name': reservation.hostname | lower, 'type': 'A', 'content': reservation['ip-address'], 'ttl': PDNS_TOFU_DNS_DEFAULT_TTL}}) -%}
#     {% endif -%}
#   {% endfor -%}
#   {% for reservation in KEA_DHCP6_HOST_RESERVATIONS -%}
#     {% for ip in reservation['ip-addresses'] -%}
#       {% set key = reservation.hostname + 'AAAA' + ip -%}
#       {% if key not in unique_records -%}
#         {% set _ = unique_records.update({key: {'name': reservation.hostname | lower, 'type': 'AAAA', 'content': ip, 'ttl': PDNS_TOFU_DNS_DEFAULT_TTL}}) -%}
#       {% endif -%}
#     {% endfor -%}
#   {% endfor -%}
#   {% for record in unique_records.values() -%}
#   - name: "{{ record.name }}"
#     type: "{{ record.type }}"
#     content: "{{ record.content }}"
#     ttl: "{{ record.ttl }}"
#   {% endfor %}
# PDNS_TOFU_MODULE_CONFIG:
#   dns_zones:
#   - name: "{{ ACME_DOMAIN_NAME }}."
#     kind: "Native"
#     nameservers:
#       - "ns1.{{ ACME_DOMAIN_NAME }}."
#     records: "{{ PDNS_COMBINED_RECORDS | from_yaml }}"
